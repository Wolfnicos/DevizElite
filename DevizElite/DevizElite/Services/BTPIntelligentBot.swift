import SwiftUI
import Combine

// MARK: - ChatBot Core cu Multiple CapabilitƒÉ»õi
class BTPIntelligentBot: ObservableObject {
    @Published var messages: [ChatMessage] = []
    @Published var isLoading = false
    
    // Servicii integrate
    private let priceService = PriceSearchService()
    private let analysisService = DocumentAnalysisService()
    private let aiService = AIService()
    
    init() {
        messages.append(ChatMessage(
            text: """
            ü§ñ Assistant BTP Intelligent disponible!
            
            Je peux:
            ‚Ä¢ üîç Rechercher prix actuels (mat√©riaux, main d'≈ìuvre)
            ‚Ä¢ üìä Analyser vos factures/devis
            ‚Ä¢ üí∞ Comparer fournisseurs en temps r√©el
            ‚Ä¢ üìà Pr√©dire co√ªts selon march√©
            ‚Ä¢ ‚ö° Calculer automatiquement quantit√©s
            ‚Ä¢ üèó Sugg√©rer alternatives √©conomiques
            
            Comment puis-je vous aider?
            """,
            isBot: true,
            type: .welcome
        ))
    }
    
    func processMessage(_ text: String, context: Document? = nil) async {
        await MainActor.run {
            messages.append(ChatMessage(text: text, isBot: false))
            isLoading = true
        }
        
        // Analyse intention
        let intent = analyzeIntent(text)
        
        switch intent {
        case .searchPrice(let product):
            await searchRealTimePrice(product)
            
        case .analyzeDocument:
            if let doc = context {
                await analyzeDocument(doc)
            }
            
        case .compareSuppliers(let item):
            await compareSuppliers(item)
            
        case .calculateQuantity(let specs):
            await calculateNeededQuantity(specs)
            
        case .marketTrends(let category):
            await getMarketTrends(category)
            
        case .smartSuggestion:
            await provideSuggestions(context: context)
            
        default:
            await generalAIResponse(text, context: context)
        }
        
        await MainActor.run {
            isLoading = false
        }
    }
    
    // MARK: - Intent Analysis
    private func analyzeIntent(_ text: String) -> BotIntent {
        let lowercased = text.lowercased()
        
        // Prix search patterns
        if lowercased.contains("prix") || lowercased.contains("co√ªt") || lowercased.contains("tarif") {
            let product = extractProduct(from: text)
            return .searchPrice(product)
        }
        
        // Analysis patterns
        if lowercased.contains("analys") || lowercased.contains("v√©rif") || lowercased.contains("contr√¥l") {
            return .analyzeDocument
        }
        
        // Comparison patterns
        if lowercased.contains("compar") || lowercased.contains("fournisseur") {
            let item = extractItem(from: text)
            return .compareSuppliers(item)
        }
        
        // Quantity calculation patterns
        if lowercased.contains("calcul") || lowercased.contains("quantit√©") {
            let specs = extractSpecs(from: text)
            return .calculateQuantity(specs)
        }
        
        // Market trends patterns
        if lowercased.contains("tendance") || lowercased.contains("march√©") || lowercased.contains("√©volution") {
            let category = extractCategory(from: text)
            return .marketTrends(category)
        }
        
        // Suggestion patterns
        if lowercased.contains("optimis") || lowercased.contains("am√©lio") || lowercased.contains("conseil") {
            return .smartSuggestion
        }
        
        return .general
    }
    
    // MARK: - Prix en Temps R√©el
    @MainActor
    private func searchRealTimePrice(_ product: String) async {
        let results = await priceService.searchCurrentPrices(for: product)
        
        var response = "üìä **Prix actuels pour \(product)**\n\n"
        
        for result in results.prefix(5) {
            response += """
            **\(result.supplier)**
            ‚Ä¢ Prix: \(String(format: "%.2f", result.price))‚Ç¨/\(result.unit)
            ‚Ä¢ Dispo: \(result.availability)
            ‚Ä¢ Mis √† jour: \(DateFormatter.current.string(from: result.lastUpdate))
            
            """
        }
        
        // Analyse
        if let min = results.min(by: { $0.price < $1.price }),
           let max = results.max(by: { $0.price < $1.price }),
           !results.isEmpty {
            let avg = results.reduce(0) { $0 + $1.price } / Double(results.count)
            
            response += """
            
            üìà **Analyse march√©:**
            ‚Ä¢ Meilleur prix: \(String(format: "%.2f", min.price))‚Ç¨ (\(min.supplier))
            ‚Ä¢ Prix moyen: \(String(format: "%.2f", avg))‚Ç¨
            ‚Ä¢ √âcart max: \(String(format: "%.0f", ((max.price - min.price) / min.price) * 100))%
            
            üí° **Conseil:** N√©gociez avec \(min.supplier) pour quantit√© importante
            """
        }
        
        messages.append(ChatMessage(text: response, isBot: true, type: .priceSearch))
    }
    
    // MARK: - Analyse de Document
    @MainActor
    private func analyzeDocument(_ document: Document) async {
        let analysis = await analysisService.analyzeDocument(document)
        
        var response = "üìä **Analyse de votre document**\n\n"
        
        // Analyse des prix
        if !analysis.priceAnalysis.warnings.isEmpty {
            response += "‚ö†Ô∏è **Alertes Prix:**\n"
            for warning in analysis.priceAnalysis.warnings {
                response += "‚Ä¢ \(warning)\n"
            }
            response += "\n"
        }
        
        // Cat√©gories
        response += "üìã **R√©partition par cat√©gorie:**\n"
        for category in analysis.priceAnalysis.categories.prefix(5) {
            response += "‚Ä¢ \(category.name): \(String(format: "%.0f", category.percentage))% (\(String(format: "%.2f", category.total))‚Ç¨)\n"
        }
        response += "\n"
        
        // Anomalies
        if !analysis.anomalies.isEmpty {
            response += "üîç **Anomalies d√©tect√©es:**\n"
            for anomaly in analysis.anomalies {
                response += "‚Ä¢ \(anomaly)\n"
            }
            response += "\n"
        }
        
        // Optimisations
        if !analysis.optimizations.isEmpty {
            response += "üí° **Suggestions d'optimisation:**\n"
            for optimization in analysis.optimizations {
                response += "‚Ä¢ \(optimization)\n"
            }
        }
        
        messages.append(ChatMessage(text: response, isBot: true, type: .documentAnalysis))
    }
    
    // MARK: - Comparison Fournisseurs
    @MainActor
    private func compareSuppliers(_ item: String) async {
        let results = await priceService.searchCurrentPrices(for: item)
        let groupedBySupplier = Dictionary(grouping: results) { $0.supplier }
        
        var response = "üîç **Comparaison fournisseurs pour \(item)**\n\n"
        
        for (supplier, products) in groupedBySupplier.sorted(by: { $0.key < $1.key }) {
            let avgPrice = products.reduce(0) { $0 + $1.price } / Double(products.count)
            let availability = products.first?.availability ?? "N/A"
            
            response += """
            **\(supplier)**
            ‚Ä¢ Prix moyen: \(String(format: "%.2f", avgPrice))‚Ç¨
            ‚Ä¢ Disponibilit√©: \(availability)
            ‚Ä¢ Produits: \(products.count)
            
            """
        }
        
        messages.append(ChatMessage(text: response, isBot: true, type: .supplierComparison))
    }
    
    // MARK: - Calcul Quantit√©s
    @MainActor
    private func calculateNeededQuantity(_ specs: String) async {
        // Simulation de calcul intelligent
        var response = "‚ö° **Calcul automatique des quantit√©s**\n\n"
        
        if specs.contains("m¬≤") || specs.contains("surface") {
            response += """
            Pour une surface, voici les quantit√©s typiques:
            ‚Ä¢ B√©ton: 0.15 m¬≥/m¬≤ (dalle 15cm)
            ‚Ä¢ Armature: 15-20 kg/m¬≥ de b√©ton
            ‚Ä¢ Coffrage: 2-3 m¬≤/m¬≤ de dalle
            ‚Ä¢ Main d'≈ìuvre: 2-3h/m¬≤
            
            üí° Ajoutez 10% de perte pour les mat√©riaux
            """
        } else {
            response += """
            ü§ñ J'analyse vos sp√©cifications...
            
            Pour un calcul pr√©cis, pr√©cisez:
            ‚Ä¢ Type de travaux (dalle, mur, cloison...)
            ‚Ä¢ Dimensions exactes
            ‚Ä¢ Mat√©riaux souhait√©s
            """
        }
        
        messages.append(ChatMessage(text: response, isBot: true, type: .quantityCalculation))
    }
    
    // MARK: - Tendances March√©
    @MainActor
    private func getMarketTrends(_ category: String) async {
        var response = "üìà **Tendances march√© 2025 - \(category)**\n\n"
        
        // Simulation donn√©es march√© r√©elles
        let trends = [
            "B√©ton": (trend: "+8%", reason: "Hausse ciment et transport"),
            "Acier": (trend: "+15%", reason: "Tensions g√©opolitiques"),
            "Bois": (trend: "-5%", reason: "Surproduction nordique"),
            "Isolation": (trend: "+3%", reason: "Nouvelles normes RE2020"),
            "√âlectricit√©": (trend: "+12%", reason: "Hausse cuivre et √©lectronique")
        ]
        
        for (material, info) in trends {
            if category.lowercased().contains(material.lowercased()) || category.isEmpty {
                response += """
                **\(material)**
                ‚Ä¢ √âvolution: \(info.trend) vs 2024
                ‚Ä¢ Raison: \(info.reason)
                
                """
            }
        }
        
        response += """
        üéØ **Recommandations:**
        ‚Ä¢ Commandez t√¥t les mat√©riaux en hausse
        ‚Ä¢ Profitez des baisses pour stocker
        ‚Ä¢ N√©gociez prix fixes pour gros projets
        """
        
        messages.append(ChatMessage(text: response, isBot: true, type: .marketTrends))
    }
    
    // MARK: - Suggestions Intelligentes
    @MainActor
    private func provideSuggestions(context: Document?) async {
        var response = "üí° **Suggestions d'optimisation**\n\n"
        
        if let doc = context {
            // Analyse du document pour suggestions contextuelles
            let total = doc.total?.doubleValue ?? 0
            
            if total > 10000 {
                response += """
                **Pour ce projet important (\(String(format: "%.0f", total))‚Ç¨):**
                ‚Ä¢ N√©gociez remises quantit√© (5-10%)
                ‚Ä¢ √âtalez livraisons pour optimiser tr√©sorerie
                ‚Ä¢ V√©rifiez TVA selon zone g√©ographique
                ‚Ä¢ Demandez garanties √©tendues
                
                """
            }
            
            // Suggestions selon le type
            if doc.type == "estimate" {
                response += """
                **Optimisations devis:**
                ‚Ä¢ Ajoutez marge n√©gociation (10-15%)
                ‚Ä¢ Pr√©cisez conditions de r√©vision prix
                ‚Ä¢ Incluez variantes √©conomiques
                """
            } else {
                response += """
                **Optimisations facture:**
                ‚Ä¢ V√©rifiez √©ch√©ances paiement
                ‚Ä¢ Appliquez escompte si paiement comptant
                ‚Ä¢ Contr√¥lez TVA et retenues
                """
            }
        } else {
            response += """
            **Conseils g√©n√©raux BTP 2025:**
            ‚Ä¢ Privil√©giez mat√©riaux locaux (-20% transport)
            ‚Ä¢ Planifiez selon m√©t√©o (gains productivit√©)
            ‚Ä¢ Groupez commandes fournisseurs
            ‚Ä¢ Utilisez outils num√©riques (gains 15%)
            """
        }
        
        messages.append(ChatMessage(text: response, isBot: true, type: .suggestions))
    }
    
    // MARK: - R√©ponse IA G√©n√©rale
    @MainActor
    private func generalAIResponse(_ text: String, context: Document?) async {
        // D√©tection si c'est une demande ChatGPT explicite
        let isGPTRequest = text.contains("[GPT]") || text.lowercased().contains("chatgpt") || text.lowercased().contains("gpt")
        
        let response = await aiService.generateSmartResponse(
            query: text,
            context: context,
            priceData: nil
        )
        
        // Ajouter indicateur ChatGPT si demand√©
        let finalResponse = isGPTRequest ? "ü§ñ **ChatGPT Expert BTP:**\n\n\(response)" : response
        
        messages.append(ChatMessage(text: finalResponse, isBot: true, type: .general))
    }
    
    // MARK: - Helper Methods
    private func extractProduct(from text: String) -> String {
        // Extraction simple - am√©liorer avec NLP
        let products = ["b√©ton", "ciment", "parpaing", "brique", "placo", "isolation", "acier", "fer"]
        for product in products {
            if text.lowercased().contains(product) {
                return product
            }
        }
        return "mat√©riau de construction"
    }
    
    private func extractItem(from text: String) -> String {
        return extractProduct(from: text)
    }
    
    private func extractSpecs(from text: String) -> String {
        return text
    }
    
    private func extractCategory(from text: String) -> String {
        let categories = ["gros ≈ìuvre", "second ≈ìuvre", "finition", "√©lectricit√©", "plomberie"]
        for category in categories {
            if text.lowercased().contains(category) {
                return category
            }
        }
        return ""
    }
}

// MARK: - Models
struct ChatMessage: Identifiable {
    let id = UUID()
    let text: String
    let isBot: Bool
    let timestamp = Date()
    let type: MessageType
    
    init(text: String, isBot: Bool, type: MessageType = .general) {
        self.text = text
        self.isBot = isBot
        self.type = type
    }
}

enum MessageType {
    case welcome
    case general
    case priceSearch
    case documentAnalysis
    case supplierComparison
    case quantityCalculation
    case marketTrends
    case suggestions
}

enum BotIntent {
    case searchPrice(String)
    case analyzeDocument
    case compareSuppliers(String)
    case calculateQuantity(String)
    case marketTrends(String)
    case smartSuggestion
    case general
}

// MARK: - Extensions
extension DateFormatter {
    static let short: DateFormatter = {
        let formatter = DateFormatter()
        formatter.dateStyle = .short
        formatter.timeStyle = .short
        return formatter
    }()
}